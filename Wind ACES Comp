import {
  ACESDataType,
  ACESType,
  AreasOfCommonExposure,
  roundedNumberFormat,
  WindAccumulation,
  WindAggregation,
  WindAreasOfCommonExposureDTO,
} from '@btp/shared-ui';
import { ColDef } from 'ag-grid-community';

export const windAccumulationColumnDefs: ColDef[] = [
  {
    headerName: 'Identifier',
    field: 'identifier',
  },
  {
    headerName: 'Locations',
    field: 'locations',
  },
  {
    headerName: 'TIV',
    field: 'tiv',
    sort: 'desc',
  },
  {
    headerName: 'Largest TIV',
    field: 'largestTIV',
    sort: 'desc',
  },
  {
    headerName: 'Wind Severity',
    field: 'WindSeverity',
  },
];

export const windAggregationsColumnDefs: ColDef[] = [
  {
    headerName: 'Identifier',
    field: 'identifier',
  },
  {
    headerName: 'Locations',
    field: 'locations',
  },
  {
    headerName: 'Wind LE',
    field: 'LE',
    sort: 'desc',
  },
  {
    headerName: 'Largest Wind LE',
    field: 'largestLE',
    sort: 'desc',
  },
  {
    headerName: 'Wind Severity',
    field: 'WindSeverity',
  },
];

export const getWindAggregations = (
  data: WindAggregation[] | null | undefined,
) => {
  if (data === null) {
    return [];
  }

  return data?.map((item: WindAggregation) => {
    return {
      identifier: item.identifier,
      locations: item.locations,
      LE: roundedNumberFormat(item.LE),
      largestLE: roundedNumberFormat(item.largestLE),
      WindSeverity: item.WindSeverity,
    };
  });
};

export const getWindAccumulations = (
  data: WindAccumulation[] | null | undefined,
) => {
  if (data === null) {
    return [];
  }

  return data?.map((item: WindAccumulation) => {
    return {
      identifier: item.identifier,
      locations: item.locations,
      tiv: roundedNumberFormat(item.tiv),
      largestTIV: roundedNumberFormat(item.largestTIV),
      WindSeverity: item.WindSeverity,
    };
  });
};

export const onWindHistorySelection = (value: string | undefined) => {
  console.log('ACES History Selection:', value);
};

export const onWindTryAgainClick = (value: string | undefined) => {
  console.log('Try Again Click:', value);
};

export const getwindAreasOfCommonExposureData = (
  data: WindAreasOfCommonExposureDTO | null,
  errorCode: string | null,
  loadingStatus: boolean,
): ACESType => {
  const acesTabs = [
    {
      tabLabel: 'Aggregation',
      tableData: {
        acesRowData: getWindAggregations(data?.wind_aggregations),
        columnData: windAggregationsColumnDefs,
      },
    },
    {
      tabLabel: 'Accumulation',
      tableData: {
        acesRowData: getWindAccumulations(data?.wind_accumulations),
        columnData: windAccumulationColumnDefs,
      },
    },
  ];

  const acesErrorData = {
    acesRowData: getWindAggregations(data?.wind_aggregations),
    columnData: windAggregationsColumnDefs,
    errorStatus: true,
  };

  const noData = {
    acesRowData: null,
    columnData: [],
    errorStatus: false,
    loadingStatus: false,
  };

  const loadingData = {
    acesRowData: null,
    columnData: [],
    errorStatus: false,
    loadingStatus: true,
  };

  const runData: ACESDataType = {
    acesRunDate: '23-JUL-2024 Without Prospects',
  };

  if (data) {
    runData.acesTabs = acesTabs;
  } else if (loadingStatus) {
    runData.tableData = loadingData;
  } else if (errorCode) {
    runData.tableData = acesErrorData;
  } else {
    runData.tableData = noData;
  }

  const acesData = [];
  acesData.push(runData);

  const windAreasOfCommonExposureData = {
    acesPeril: 'Wind',
    acesComp: (
      <AreasOfCommonExposure
        acesTableData={acesData}
        onHistorySelection={onWindHistorySelection}
        onTryAgainClick={onWindTryAgainClick}
      />
    ),
  };
  return windAreasOfCommonExposureData;
};

export default getwindAreasOfCommonExposureData;
