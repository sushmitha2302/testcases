import {
  NATURAL_HAZARDS_EARTHQUAKE_ENABLED,
  NATURAL_HAZARDS_FLOOD_ENABLED,
  NATURAL_HAZARDS_WIND_ENABLED,
  AccType,
  CreateEarthMovementBarChart,
  CreateFloodBarChart,
  CreateWindBarChart,
} from '@btp/shared-ui';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { RdsBox } from 'rds-components-react';
import { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import NatHazFilters from 'src/NatHazDetails/NatHazFilters/NatHazFilters';
import { useAccount } from 'src/common/contexts/AccountContext';
import { useHeader } from 'src/common/contexts/HeaderContext';
import { NatHazModuleUrlRouteEnum } from 'src/common/utils/constants/nathaz.enum';
import { getNavigationUrl } from 'src/common/utils/navigationHelper';
import useFetchWindBarAndAccordionData from 'src/hooks/useFetchWindBarChartData';
import useFetchEarthMovementBarAndAccordionData from 'src/hooks/useFetchEarthMovementBarData';
import { RightUtilityBar } from 'src/common/components/RightUtilityBar';
import { useFetchFloodBarAndAccordionData } from 'src/hooks/useFetchFloodBarData';
import { NatHazPerilAccordion } from './NatHazPerilAccordion/NatHazPerilAccordion';
export type PerilError = {
  peril: NatHazModuleUrlRouteEnum;
  errorState: boolean;
  traceId: string | null | undefined;
  onTryAgainAction: () => void;
};
export function NatHazOverview() {
  const { accountDetails } = useAccount();
  const [numPerilLoading, setNumPerilLoading] = useState(0);
  const [perilErrors, setPerilErrors] = useState<PerilError[]>([]);
  const navigate = useNavigate();
  const { pathname } = useLocation();
  const {
    FloodAttributes,
    loading: FloodAttributesLoading,
    errorCode: FloodAttributesError,
    refetch: floodRefetch,
  } = useFetchFloodBarAndAccordionData();
  const {
    EarthMovementAttributes,
    loading: EarthMovementAttributesLoading,
    errorCode: EarthMovementAttributesError,
    refetch: earthMovementRefetch,
  } = useFetchEarthMovementBarAndAccordionData();
  const {
    WindAttributes,
    loading: WindAttributesLoading,
    errorCode: WindAttributesError,
    refetch: windRefetch,
  } = useFetchWindBarAndAccordionData();
  const {
    activeTab,
    setActiveTab,
    includeProspect,
    setIncludeProspect,
    asofDate,
  } = useHeader();
  const flags = useFlags();
  const floodEnabled = flags[NATURAL_HAZARDS_FLOOD_ENABLED];
  const windEnabled = flags[NATURAL_HAZARDS_WIND_ENABLED];
  const earthquakeEnabled = flags[NATURAL_HAZARDS_EARTHQUAKE_ENABLED];
  const [perilData, setPerilData] = useState<AccType[]>([]);
  const handleTitleClick = (title: string) => {
    let pageUrl: string = '';
    switch (title) {
      case 'Flood':
        pageUrl = floodEnabled ? NatHazModuleUrlRouteEnum.FLOODURL : '';
        break;
      case 'Wind':
        pageUrl = windEnabled ? NatHazModuleUrlRouteEnum.WINDURL : '';
        break;
      case 'Earth Movement':
        pageUrl = earthquakeEnabled ? NatHazModuleUrlRouteEnum.EARTHURL : '';
        break;
      default:
        break;
    }
    if (pageUrl) {
      navigate(
        getNavigationUrl({
          locationPath: pathname,
          orgId: accountDetails.orgid,
          pageUrl,
        }),
      );
    }
  };
  const updatedPerilData: AccType[] = perilData
    ?.map((item) => {
      if (
        (item.accTitle === 'Flood' && floodEnabled) ||
        (item.accTitle === 'Wind' && windEnabled) ||
        (item.accTitle === 'Earth Movement' && earthquakeEnabled)
      ) {
        return {
          ...item,
          onTitleClick: (title: string) => handleTitleClick(title),
        };
      }
      return {
        accTitle: '',
      };
    })
    .filter((item) => item.accTitle !== '');
  useEffect(() => {
    if (
      (pathname.endsWith(`${accountDetails.orgid}`) ||
        pathname.endsWith(`${accountDetails.orgid}/`)) &&
      activeTab !== 0
    ) {
      setActiveTab(0);
    }
  }, [accountDetails.orgid, activeTab, pathname, setActiveTab]);
  useEffect(() => {
    const loadingStates = [
      FloodAttributesLoading && floodEnabled,
      WindAttributesLoading && windEnabled,
      EarthMovementAttributesLoading && earthquakeEnabled,
    ];
    setNumPerilLoading(
      loadingStates.reduce(
        (count, isLoading) => count + (isLoading ? 1 : 0),
        0,
      ),
    );
    const chartArr: AccType[] = [];
    if (floodEnabled && FloodAttributes !== null && !FloodAttributesLoading) {
      const floodChart = CreateFloodBarChart(FloodAttributes, includeProspect);
      chartArr.push(floodChart);
    }
    if (
      earthquakeEnabled &&
      EarthMovementAttributes !== null &&
      !EarthMovementAttributesLoading
    ) {
      const earthMovementChart = CreateEarthMovementBarChart(
        EarthMovementAttributes,
        includeProspect,
      );
      chartArr.push(earthMovementChart);
    }
    if (windEnabled && WindAttributes !== null && !WindAttributesLoading) {
      const windBarChart = CreateWindBarChart(WindAttributes, includeProspect);
      chartArr.push(windBarChart);
    }
    const errorStates = [
      {
        peril: NatHazModuleUrlRouteEnum.FLOODURL,
        errorState:
          floodEnabled && !FloodAttributesLoading && FloodAttributes == null,
        traceId: FloodAttributesError,
        onTryAgainAction: floodRefetch,
      },
      {
        peril: NatHazModuleUrlRouteEnum.EARTHURL,
        errorState:
          earthquakeEnabled &&
          !EarthMovementAttributesLoading &&
          EarthMovementAttributes == null,
        traceId: EarthMovementAttributesError,
        onTryAgainAction: earthMovementRefetch,
      },
      {
        peril: NatHazModuleUrlRouteEnum.WINDURL,
        errorState:
          windEnabled && !WindAttributesLoading && WindAttributes == null,
        traceId: WindAttributesError,
        onTryAgainAction: windRefetch,
      },
    ];
    setPerilErrors(errorStates);
    setPerilData(chartArr);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    floodEnabled,
    earthquakeEnabled,
    windEnabled,
    FloodAttributesLoading,
    EarthMovementAttributesLoading,
    WindAttributesLoading,
    includeProspect,
    FloodAttributes,
    WindAttributes,
    EarthMovementAttributes,
    FloodAttributesError,
    EarthMovementAttributesError,
    WindAttributesError,
  ]);
  return (
    <RdsBox
      className="w-full h-full overflow-auto"
      data-testid="overview"
      height="calc(100vh - 4rem)"
    >
      <div className="flex flex-row">
        <div className="flex flex-row flex-grow">
          <div className="flex-grow pb-4">
            <NatHazFilters
              includeProspect={includeProspect}
              setIncludeProspect={setIncludeProspect}
              asofDate={asofDate}
              isOverview
            />
            <NatHazPerilAccordion
              perilData={updatedPerilData}
              loadingCount={numPerilLoading}
              errorStates={perilErrors}
            />
          </div>
        </div>
        <RdsBox
          className="flex-shrink-0 h-full overflow-auto"
          height="calc(100vh - 4rem)"
        >
          <RightUtilityBar />
        </RdsBox>
      </div>
    </RdsBox>
  );
}
export default NatHazOverview;
