import { renderHook } from '@testing-library/react';
import useFetchWindBarChartData from 'src/hooks/useFetchWindBarChartData';

jest.mock('@apollo/client', () => ({
  ...jest.requireActual('@apollo/client'),
  useSuspenseQuery: () => ({
    data: {
      btp_natural_hazards: {
        wind_detail: {
          org_prospect_client_id: 4369,
          as_of_date: '2024-05-14',
          currency_type_id: 47,
          location_detail: [
            {
              cbi_id: 913405,
              cbi_version_id: 7539984,
              changes_in_effect_date: '2010-05-17',
              location_name: '50D0EDD82894EC533102FA87A10E5D92455006F2',
              index_record_number: null,
              bim_id: null,
              address: {
                street: null,
                city: null,
                postal_code: null,
                state: null,
                country: {
                  code: 'CAN',
                  name: 'Canada',
                },
              },
              business_interest_geofacts: null,
              occupancy: null,
              underwriting_value: null,
              status_description: 'Active',
              type_description: 'Location',
              wind_region: null,
              site_engineering: null,
              loss_expectancies: null,
            },
          ],
        },
      },
    },
    error: null,
  }),
  gql: () => {},
}));

jest.mock('src/common/contexts/AccountContext', () => ({
  useAccount: jest.fn(() => ({ accountDetails: { orgid: 9966 } })),
}));

jest.mock('src/common/contexts/HeaderContext', () => ({
  useHeader: jest.fn(() => ({
    selectedCurrency: 456,
    asofDate: '2022-01-01',
    includeProspect: false,
  })),
}));

jest.mock('src/models', () => ({
  BtpNaturalHazards_GetWindAggregates_V02Document: 'mock-document',
}));

describe('useFetchWindBarChartData', () => {
  it('should be defined', () => {
    expect(useFetchWindBarChartData).toBeDefined();
  });

  it('should return WindAggregateDetails array success response', () => {
    const { result } = renderHook(() => useFetchWindBarChartData());
    expect(result.current.WindAggregates).toBeDefined();
    expect(typeof result.current.WindAggregates).toBe('object');
    expect(result.current.error).toBe(null);
  });
});

