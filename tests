 return useMemo(() => {
    if (!data) return { EarthMovementAggregates: null, error };

    const earthMovementAggregates = data.btp_natural_hazards.earth_movement_aggregates;

    const mapLocationAggregates = (aggregates: any): LocationAggregates => ({
      location_count: aggregates.location_count,
      total_insured_value: aggregates.total_insured_value,
    });

    const mapEarthquakeFrequencyZoneAggregate = (aggregate: any): EarthquakeFrequencyZoneAggregate => ({
      earthquake_frequency_zone_code: aggregate.earthquake_frequency_zone_code,
      earthquake_frequency_zone_description: aggregate.earthquake_frequency_zone_description,
      activelocationAggregates: mapLocationAggregates(aggregate.active_locations_aggregate),
      locationAggregates: mapLocationAggregates(aggregate.locations_aggregate),
    });

    const mapEarthquakeFrequencyRegionAggregate = (aggregate: any): EarthquakeFrequencyregionAggregate => ({
      earthquake_frequency_zone_code: aggregate.earthquake_region_code,
      earthquake_frequency_zone_description: aggregate.earthquake_region_description,
      activelocationAggregates: mapLocationAggregates(aggregate.active_locations_aggregate),
      locationAggregates: mapLocationAggregates(aggregate.locations_aggregate),
    });

    const EarthMovementAggregates: OverviewBarChartDTO = {
      as_of_date: earthMovementAggregates.as_of_date,
      currency_type_id: earthMovementAggregates.currency_type_id,
      org_prospect_client_id: earthMovementAggregates.org_prospect_client_id,
      locationAggregates: mapLocationAggregates(earthMovementAggregates.locations_aggregate),
      activelocationAggregates: mapLocationAggregates(earthMovementAggregates.active_locations_aggregate),
      earthquake_frequency_zone_aggregates: earthMovementAggregates.earthquake_frequency_zone_aggregates?.map(mapEarthquakeFrequencyZoneAggregate) || null,
      earthquake_region_aggregates: earthMovementAggregates.earthquake_region_aggregates?.map(mapEarthquakeFrequencyRegionAggregate) || null,
    };

    return { EarthMovementAggregates, error };
  }, [data, error]);
};

export default useFetchEarthMovementBarAndAccordionData;
