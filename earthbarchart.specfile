import { renderHook } from '@testing-library/react';
import { useQuery } from '@apollo/client';
import { useFetchEarthMovementBarAndAccordionData } from './useFetchEarthMovementBarData';

const mockRefetch: jest.Mock = jest.fn();
jest.mock('@apollo/client', () => ({
  ...jest.requireActual('@apollo/client'),
  useQuery: jest.fn(),
}));

jest.mock('src/common/contexts/AccountContext', () => ({
  useAccount: jest.fn(() => ({ accountDetails: { orgid: 9966 } })),
}));

jest.mock('src/common/contexts/HeaderContext', () => ({
  useHeader: jest.fn(() => ({
    selectedCurrency: 456,
    asofDate: '2022-01-01',
    includeProspect: false,
  })),
}));

jest.mock('src/models', () => ({
  BtpNaturalHazards_GetEarthMovementAttributes_V01Document: 'mock-document',
}));

describe('useFetchEarthMovementBarAndAccordionData', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('should be defined', () => {
    expect(useFetchEarthMovementBarAndAccordionData).toBeDefined();
  });
  
  it('should return EarthMovementBarData and EarthMovementAccordionData success response', () => {
    const useQueryMock = useQuery as jest.Mock;
    useQueryMock.mockReturnValue({
      data: {
        btp_natural_hazards: {
          earth_movement_attributes: {
            as_of_date: '2024-06-06',
            currency_type_id: 47,
            org_prospect_client_id: 4369,
            earth_movement_aggregates: {
              locations_aggregate: {
                location_count: 30,
                total_insured_value: 3000,
              },
              active_locations_aggregate: {
                location_count: 10,
                total_insured_value: 1000,
              },
              earthquake_frequency_zone_aggregates: [
                {
                  earthquake_frequency_zone_code: 'zone1',
                  locations_aggregate: {
                    location_count: 30,
                    total_insured_value: 3000,
                  },
                  active_locations_aggregate: {
                    location_count: 10,
                    total_insured_value: 1000,
                  },
                  prospect_locations_aggregate: {
                    location_count: 20,
                    total_insured_value: 2000,
                  },
                },
              ],
              earthquake_region_aggregates: [
                {
                  earthquake_region_code: 'region1',
                  earthquake_region_description: 'Region 1',
                  locations_aggregate: {
                    location_count: 40,
                    total_insured_value: 4000,
                  },
                  active_locations_aggregate: {
                    location_count: 15,
                    total_insured_value: 1500,
                  },
                  prospect_locations_aggregate: {
                    location_count: 25,
                    total_insured_value: 2500,
                  },
                },
              ],
            },
            earth_movement_risk_details: {
              active_locations_risk_status: {
                color_code: 'Green',
                risk_quality: 'Minimal',
              },
              risk_status: {
                color_code: 'Green',
                risk_quality: 'Minimal',
              },
            },
          },
        },
      },
      loading: false,
      error: null,
      refetch: mockRefetch,
    });
    const { result } = renderHook(() =>
      useFetchEarthMovementBarAndAccordionData(),
    );

    expect(result.current.EarthMovementAttributes).toBeDefined();
    expect(typeof result.current.EarthMovementAttributes).toBe('object');
    expect(result.current.errorCode).toBe(null);
    expect(result.current.refetch).toBeDefined();
  });

  it('should call refetch function', () => {
    const useQueryMock = useQuery as jest.Mock;
    useQueryMock.mockReturnValue({
      data: null,
      loading: false,
      error: null,
      refetch: mockRefetch,
    });
    const { result } = renderHook(() =>
      useFetchEarthMovementBarAndAccordionData(),
    );

    result.current.refetch();
    expect(mockRefetch).toHaveBeenCalled();
  });

  it('should handle null data', () => {
    const useQueryMock = useQuery as jest.Mock;
    useQueryMock.mockReturnValue({
      data: null,
      loading: false,
      error: null,
      refetch: mockRefetch,
    });
    const { result } = renderHook(() =>
      useFetchEarthMovementBarAndAccordionData(),
    );

    expect(result.current.EarthMovementAttributes).toBe(null);
  });
});
