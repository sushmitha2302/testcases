import React from 'react';
import { BarChart, TableList } from '@btp/shared-ui';
import { ColorThemes } from '../Highcharts/BarChart/colorThemes';
import {
  BarDataType,
  ColumnType,
  LabelValueType,
  TableRowAction,
  TableRowType,
} from '../types';

/**
 * formatAmount will convert given number into short forms like (2.5k, 3.6M etc.,)
 * @param {number} labelValue - actual value
 * @returns {string} - formattedAmount
 */
export const formatAmount = (labelValue: number) => {
  if (Math.abs(Number(labelValue)) >= 1.0e9) {
    const val = Math.abs(Number(labelValue)) / 1.0e9;
    return `${Number(val).toFixed(2)}B`;
  }
  if (Math.abs(Number(labelValue)) >= 1.0e6) {
    const val = Math.abs(Number(labelValue)) / 1.0e6;
    return `${Number(val).toFixed(2)}M`;
  }
  if (Math.abs(Number(labelValue)) >= 1.0e3) {
    const val = Math.abs(Number(labelValue)) / 1.0e3;
    return `${Number(val).toFixed(2)}K`;
  }
  const val = Math.abs(Number(labelValue));
  return `${Number(val).toFixed(2)}`;
};

/**
 * formatNumberwithCommas function will format input value with commas (Example: value- 123456, output - 1,23,456)
 * @param {number}value - input value
 * @returns formatted comma seperated value
 */
export function formatNumberwithCommas(value: number | null) {
  if (value) {
    return Math.floor(value).toLocaleString('en-US');
  }
  return 0;
}

/**
 * tivPercentage function will returns the calculated tiv percentage
 * @param {number}value - value
 * @param {number}total - total tiv
 * @returns percentage
 */
export const tivPercentage = (value: number, total: number) => {
  if (total === 0) {
    return 0;
  }
  const percentage = Math.round((value / total) * 100);
  return `${percentage}%`;
};

/**
 * CreateOverviewBarChart function will creates the BarChart element
 * @param {BarDataType[]} barData - barchart Data
 * @param {number} total - total
 * @param {ColorThemes} theme - theme
 * @param {LabelValueType[]} rightContent - barchart right content
 * @returns created BarChart React Element
 */
export function CreateOverviewBarChart(
  barData: BarDataType[],
  total: number,
  theme: ColorThemes,
  rightContent?: LabelValueType[],
) {
  return React.createElement(BarChart, {
    barData,
    rightContent,
    theme,
    total,
  });
}

/**
 * CreateOverviewTableList function will creates the BarChart Accordion Table
 * @param {string}tableTitle - tableTitle
 * @param {TableRowType[]}tableData - Table data
 * @param {ColumnType[]}columnData - column data
 * @param {{[key: string]: TableRowAction}}actions - actions
 * @returns created BarChart Accordion TableList React Element
 */
export function CreateOverviewTableList(
  tableTitle: string,
  tableData: TableRowType[],
  columnData: ColumnType[],
  actions: {
    [key: string]: TableRowAction;
  },
) {
  return React.createElement(TableList, {
    tableTitle,
    tableData,
    columnData,
    actions,
  });
}
