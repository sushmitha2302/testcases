export const createChart = (
  EarthMovementAggregates: EarthMovementBarchartDTO,
  includeProspect: boolean,
) => {
  const zoneList = ['50', '100', '250', '500', '>500'];

  const chartData: any = [];
  const totalTiv: number = EarthMovementAggregates?.totalTIV ?? 0;
  const totalActiveTiv: number = EarthMovementAggregates.totalActiveTIV ?? 0;
  zoneList.forEach((zone) => {
    const zoneData =
      EarthMovementAggregates?.earthquake_frequency_zone_aggregates?.find(
        (item) => item.zoneCode === zone,
      );
    if (zoneData) {
      if (zoneData.activeTIV && zoneData.activeTIV !== 0) {
        chartData.push({
          label: `Zone ${zoneData?.zoneCode}`,
          barValue: zoneData?.activeTIV,
          legendValue: formatAmount(zoneData?.activeTIV ?? 0),
        });
      }
      if (includeProspect) {
        if (zoneData.totalTIV && zoneData.totalTIV !== 0) {
          chartData.push({
            label: `Zone ${zoneData?.zoneCode}`,
            barValue: zoneData?.totalTIV,
            legendValue: formatAmount(zoneData?.totalTIV ?? 0),
            pattern: true,
          });
        }
      }
    }
  });
  return React.createElement(BarChart, {
    barData: chartData,
    rightContent: [
      {
        label: 'Total TIV',
        value: formatAmount(includeProspect ? totalTiv : totalActiveTiv),
      },
    ],
    theme: includeProspect ? ColorThemes.Prospect : ColorThemes.Active,
    total: includeProspect ? totalTiv : totalActiveTiv,
  });
};

export const createAccordion = (
  EarthMovementAggregates: EarthMovementBarchartDTO,
  includeProspect: boolean,
) => {
  const totalTiv: number = EarthMovementAggregates?.totalTIV ?? 0;
  const totalActiveTiv: number = EarthMovementAggregates.totalActiveTIV ?? 0;
  const accordionData: any = [];
  EarthMovementAggregates.earthquake_region_aggregates?.forEach((region) => {
    const regionData = {
      region: region.regionDescription,
      locations: includeProspect
        ? region.totalLocationCount
        : region.activeLocationCount,
      tiv: formatNumber(includeProspect ? region.totalTIV : region.activeTIV),
      tiv_percentage: convertToPercent(
        includeProspect ? region.totalTIV ?? 0 : region.activeTIV ?? 0,
        includeProspect ? totalTiv : totalActiveTiv,
      ),
    };
    if (regionData.locations !== 0) {
      accordionData.push(regionData);
    }
  });
  return React.createElement(TableList, {
    tableTitle: 'Earth Movement',
    tableData: accordionData,
    columnData: earthMovementColumnAccordionData,
    actions: actionsMock,
  });
};

/**
 * CreateEarthMovementBarChart will create barchart elements
 * @param { Array } EarthMovementAggregates
 * @param { Boolean } includeProspect
 * @returns list with earthMovementBarChart elements
 */
export const CreateEarthMovementBarChart = (
  EarthMovementAggregates: EarthMovementBarchartDTO,
  includeProspect: boolean,
  includeAccordion: boolean,
): AccType => {
  const accComp = createChart(EarthMovementAggregates, includeProspect);
  const accItemComp = createAccordion(EarthMovementAggregates, includeProspect);

  const earthMovementPeril: AccType = {
    accTitle: 'Earth Movement',
    status: RiskStatus.SEVERE,
    accComp,
  };
  if (includeAccordion) {
    earthMovementPeril.accItemComp = accItemComp;
  }
  return earthMovementPeril;
};

export default CreateEarthMovementBarChart;
