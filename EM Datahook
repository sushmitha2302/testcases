import { useSuspenseQuery } from '@apollo/client';
import { OverviewBarChartDTO } from '@btp/shared-ui';
import { useMemo } from 'react';
import { useAccount } from 'src/common/contexts/AccountContext';
import { useHeader } from 'src/common/contexts/HeaderContext';
import { convertDateToJson } from 'src/mappers/natHazMappers';
import {
  BtpNaturalHazards_GetEarthMovementAggregates_V01Document,
  BtpNaturalHazards_GetEarthMovementAggregates_V01Query,
} from 'src/models';

const FetchEarthMovementBarAndAccordionDetails = (
  orgid: number,
  date: Date | null,
  selectedCurrency: number | null,
) => {
  const { data, error } =
    useSuspenseQuery<BtpNaturalHazards_GetEarthMovementAggregates_V01Query>(
      BtpNaturalHazards_GetEarthMovementAggregates_V01Document,
      {
        variables: {
          org_prospect_client_id: orgid,
          as_of_date: convertDateToJson(date),
          context_currency_type_id: selectedCurrency,
        },
      },
    );
  return { data, error };
};

export const useFetchEarthMovementBarAndAccordionData = () => {
  const { accountDetails } = useAccount();
  const { selectedCurrency, asofDate } = useHeader();
  const { orgid } = accountDetails;
  const { data, error } = FetchEarthMovementBarAndAccordionDetails(
    +orgid,
    asofDate,
    selectedCurrency,
  );

  return useMemo(() => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const earthMovementAggregates: any =
      data?.btp_natural_hazards?.earth_movement_aggregates;
    const EarthMovementAggregates: OverviewBarChartDTO = {
      as_of_date: earthMovementAggregates?.as_of_date,
      currency_type_id: earthMovementAggregates?.currency_type_id,
      org_prospect_client_id: earthMovementAggregates?.org_prospect_client_id,
      earthquake_frequency_zone_aggregates:
        earthMovementAggregates?.earthquake_frequency_zone_aggregates?.map(
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (aggregate: any) => {
            const res = {
              earthquake_frequency_zone_code:
                aggregate?.earthquake_frequency_zone_code,
              earthquake_frequency_zone_description:
                aggregate?.earthquake_frequency_zone_description,
              active_locations_aggregate: aggregate?.active_locations_aggregate
                ? aggregate?.active_locations_aggregate
                : {
                    location_count: 0,
                    total_insured_value: 0,
                  },
              prospect_locations_aggregate:
                aggregate?.prospect_locations_aggregate
                  ? aggregate?.prospect_locations_aggregate
                  : {
                      location_count: 0,
                      total_insured_value: 0,
                    },
            };
            return res;
          },
        ) || null,
      earthquake_region_aggregates:
        earthMovementAggregates?.earthquake_region_aggregates?.map(
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (aggregate: any) => {
            const res = {
              earthquake_region_code: aggregate?.earthquake_region_code,
              earthquake_region_description:
                aggregate?.earthquake_region_description,
              active_locations_aggregate: aggregate.active_locations_aggregate
                ? aggregate?.active_locations_aggregate
                : {
                    location_count: 0,
                    total_insured_value: 0,
                  },
              prospect_locations_aggregate:
                aggregate.prospect_locations_aggregate
                  ? aggregate?.prospect_locations_aggregate
                  : {
                      location_count: 0,
                      total_insured_value: 0,
                    },
            };
            return res;
          },
        ) || null,
    };

    const payload = {
      EarthMovementAggregates,
      error,
    };
    return payload;
  }, [data, error]);
};

export default useFetchEarthMovementBarAndAccordionData;
