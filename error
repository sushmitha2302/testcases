import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { MockedProvider } from '@apollo/client/testing';
import { NATURAL_HAZARDS_EARTHQUAKE_ENABLED, NATURAL_HAZARDS_FLOOD_ENABLED, NATURAL_HAZARDS_WIND_ENABLED } from '@btp/shared-ui';
import { NatHazOverview } from './NatHazOverview';
import { useLocation } from 'react-router-dom';
import { mockFlags } from 'jest-launchdarkly-mock';
import { useAccount } from 'src/common/contexts/AccountContext';
import { useHeader } from 'src/common/contexts/HeaderContext';
import { useFetchEarthMovementBarAndAccordionData } from 'src/hooks/useFetchEarthMovementBarData';
import { useFetchFloodTIVData } from 'src/hooks/useFetchFloodTIVData';
import { RightUtilityBar } from 'src/common/components/RightUtilityBar';

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => jest.fn(),
  useLocation: () => ({
    pathname: '/',
  }),
  useSearchParams: () => [new URLSearchParams({ currency: '02' })],
}));

jest.mock('src/hooks/useFetchEarthMovementBarData', () => ({
  __esModule: true,
  default: jest.fn(() => ({
    EarthMovementBarData: [],
    EarthMovementAccordionData: [],
  })),
}));

jest.mock('src/hooks/useFetchFloodTIVData', () => ({
  __esModule: true,
  useFetchFloodTIVData: jest.fn(() => ({
    floodTIVDetails: {
      highActive: 0,
      highProspect: 0,
      reducedActive: 0,
      reducedProspect: 0,
      moderateActive: 0,
      moderatePropect: 0,
      lowActive: 0,
      lowProspect: 0,
    },
  })),
}));

jest.mock('src/common/contexts/AccountContext', () => ({
  __esModule: true,
  useAccount: jest.fn(() => ({
    accountDetails: { orgid: '12345' },
  })),
}));

jest.mock('src/common/contexts/HeaderContext', () => ({
  __esModule: true,
  useHeader: jest.fn(() => ({
    activeTab: 0,
    setActiveTab: jest.fn(),
    tivResult: [],
    includeProspect: true,
    setIncludeProspect: jest.fn(),
  })),
}));

jest.mock('src/common/components/RightUtilityBar', () => ({
  __esModule: true,
  RightUtilityBar: () => null,
}));

describe('NatHazOverview Component', () => {
  beforeEach(() => {
    mockFlags({
      [NATURAL_HAZARDS_FLOOD_ENABLED]: true,
      [NATURAL_HAZARDS_WIND_ENABLED]: true,
      [NATURAL_HAZARDS_EARTHQUAKE_ENABLED]: true,
    });
  });

  it('renders NatHazOverview page successfully', () => {
    render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    expect(screen.getByTestId('overview')).toBeDefined();
  });

  it('Flood module is available', () => {
    const { getByText } = render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    const floodLink = getByText('Flood');
    expect(floodLink).toBeInTheDocument();
  });

  it('Navigates to Flood page when Flood link is clicked', async () => {
    const mockNavigate = jest.fn();
    require('react-router-dom').useNavigate = () => mockNavigate;

    const { getByText } = render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    const floodLink = getByText('Flood').closest('rds-link');
    if (floodLink) {
      await waitFor(() => userEvent.click(floodLink));
      expect(mockNavigate).toHaveBeenCalledWith(expect.stringContaining('flood'));
    }
  });

  it('Wind module is available', () => {
    const { getByText } = render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    const windLink = getByText('Wind');
    expect(windLink).toBeInTheDocument();
  });

  it('Navigates to Wind page when Wind link is clicked', async () => {
    const mockNavigate = jest.fn();
    require('react-router-dom').useNavigate = () => mockNavigate;

    const { getByText } = render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    const windLink = getByText('Wind').closest('rds-link');
    if (windLink) {
      await waitFor(() => userEvent.click(windLink));
      expect(mockNavigate).toHaveBeenCalledWith(expect.stringContaining('wind'));
    }
  });

  it('Earth-Movement module is available', () => {
    const { getByText } = render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    const earthMovementLink = getByText('Earth Movement');
    expect(earthMovementLink).toBeInTheDocument();
  });

  it('Navigates to Earth Movement page when Earth Movement link is clicked', async () => {
    const mockNavigate = jest.fn();
    require('react-router-dom').useNavigate = () => mockNavigate;

    const { getAllByText } = render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    const earthMovementLinks = getAllByText('Earth Movement').filter(element => element.closest('rds-link'));
    if (earthMovementLinks.length > 0) {
      await waitFor(() => userEvent.click(earthMovementLinks[0]));
      expect(mockNavigate).toHaveBeenCalledWith(expect.stringContaining('earth-movement'));
    }
  });

  it('does not set activeTab if pathname is overview and activeTab is 0', () => {
    const mockSetActiveTab = jest.fn();
    require('src/common/contexts/HeaderContext').useHeader.mockReturnValue({
      activeTab: 0,
      setActiveTab: mockSetActiveTab,
    });

    const { getByTestId } = render(
      <MockedProvider mocks={[]} addTypename={false}>
        <NatHazOverview />
      </MockedProvider>
    );
    expect(mockSetActiveTab).not.toHaveBeenCalledWith(0);
  });
});
