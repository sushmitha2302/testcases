import { render, screen } from '@testing-library/react';
import { useQuery } from '@apollo/client';
import { useAccount } from 'src/common/contexts/AccountContext';
import { useHeader } from 'src/common/contexts/HeaderContext';
import PrescreeningMap from '..';
import NatHazMap from '../../NatHazMap';
import { LocationPinData } from 'src/common/interfaces/interfaces';

const MockMapComponent: React.FC = (props) => {
  const content = 'Test Map';
  return <div data-testid="mocked-map">{content}</div>;
};

jest.mock('@fmglobal/dce-esri-components', () => ({
    __esModule: true,
    BTPPrescreeningMap: jest.fn(() => <MockMapComponent />),
    MapLayer: {},
    MapLayerType: {},
    Basemaps: { STREETS_VECTOR: 'streets vector' },
  }));

jest.mock('src/common/contexts/AccountContext');
jest.mock('src/common/contexts/HeaderContext');

const mockNavigateToBoB = jest.fn();
jest.mock('@btp/shared-ui', () => ({
  ...jest.requireActual('@btp/shared-ui'),
  useShellNavigation: jest.fn(() => ({
    navigateToBoB: mockNavigateToBoB,
  })),
}));

jest.mock('@apollo/client', () => ({
  ...jest.requireActual('@apollo/client'),
  useQuery: jest.fn(),
}));

const mockUseAuthorizationContext = jest.fn();
jest.mock('cas-react', () => ({
  useAuthorizationContext: () => mockUseAuthorizationContext(),
}));

describe('PrescreeningMap Component', () => {

  it('should render PrescreeningMap without any errors', () => {
    const PrescreeningMapProps = {
      locationPinsData: [
        {
          id: '1ASDASDAAASASASKJHAVBYIOKJ798KKAJGHKJH79965KLADAJGHIUHJN7896778',
          longitude: -96.8035600038,
          latitude: 32.8121000028,
          name: 'Tire Company Inc',
          occupancyName: 'Plastic and Rubber Products',
          indexRecNumber: 'IR200.08.-153',
          address: '2905 Stonebridge Court, Norman OK 73071',
          address_line_1: '2905 Stonebridge Court',
          address_line_2: '',
          city_name: 'Norman',
          state_province_code: 'OK',
          postal_code: '73071',
          country_name: 'United States',
          tivValue: 8.8,
          tiv: '$8.2M',
          floodZone: 'Low',
          windZone: '90MPH',
          earthquakeZone: '>500',
        },
      ],
      zoomLevel: 2,
    };
    render(<PrescreeningMap {...PrescreeningMapProps} />);
  });
});

describe('NatHazMap Component', () => {
  const mockUseHeader = useHeader as jest.Mock;
  const mockUseAccount = useAccount as jest.Mock;
  const useQueryMock = useQuery as jest.Mock;
  mockUseAuthorizationContext.mockReturnValue({
    usersRoles: ['role1'],
  });
  beforeEach(() => {
    mockUseHeader.mockReturnValue({
      asofDate: new Date(),
    });
    mockUseAccount.mockReturnValue({
      accountDetails: {
        orgid: '123',
      },
    });
    
    useQueryMock.mockReturnValue({
      data: {
        latest_prospect_clients: [
          {
            as_of_business_interest_details: [
              {
                business_interest_geofacts: [
                  {
                    longitude_measure: -96.8035600038,
                    latitude_measure: 32.8121000028,
                    flood_exposure_description: 'Low',
                    wind_speed_miles_per_hour_description: '90MPH',
                    earthquake_frequency_zone_description: '>500',
                  },
                ],
                cbi_id:
                  '1ASDASDAAASASASKJHAVBYIOKJ798KKAJGHKJH79965KLADAJGHIUHJN7896778',
                name: 'Tire Company Inc',
                occupancy: { description: 'Plastic and Rubber Products' },
                index_record_number: 'IR200.08.-153',
                street: '2905 Stonebridge Court',
                city_name: 'Norman',
                state_province_code: 'OK',
                postal_code: '73071',
                country_name: 'United States',
                reported_currency_total_amount: 8.8,
              },
            ],
          },
        ],
      },
    });
  });

  it('should return MapDetails success response and should render NatHazMap without any errors', () => {
    render(<NatHazMap />);
    expect(screen.getByText('Test Map')).toBeInTheDocument();
  });
  it('should render NatHazMap with redirect notice', () => {
    mockUseAuthorizationContext.mockReturnValue({
        usersRoles: [],
      });
    render(<NatHazMap />);
    expect(screen.getByText('Redirect notice')).toBeInTheDocument();
  });
});
