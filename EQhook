import { useSuspenseQuery } from '@apollo/client';
import { useMemo } from 'react';
import { useAccount } from 'src/common/contexts/AccountContext';
import { useHeader } from 'src/common/contexts/HeaderContext';
import {
  EarthMovementRegionData,
  EarthMovementZoneData,
} from 'src/common/interfaces/interfaces';
import { convertDateToJson } from 'src/mappers/natHazMappers';
import {
  BtpNaturalHazards_GetEarthMovementAggregates_V01Document,
  BtpNaturalHazards_GetEarthMovementAggregates_V01Query,
} from 'src/models';

const FetchEarthMovementBarAndAccordionDetails = (
  orgid: number,
  date: Date | null,
  selectedCurrency: number | null,
) => {
  const { data, error } =
    useSuspenseQuery<BtpNaturalHazards_GetEarthMovementAggregates_V01Query>(
      BtpNaturalHazards_GetEarthMovementAggregates_V01Document,
      {
        variables: {
          org_prospect_client_id: orgid,
          as_of_date: convertDateToJson(date),
          context_currency_type_id: selectedCurrency,
        },
      },
    );
  return { data, error };
};

export const useFetchEarthMovementBarAndAccordionData = () => {
  const { accountDetails } = useAccount();
  const { selectedCurrency, asofDate } = useHeader();
  const { orgid } = accountDetails;
  const { data, error } = FetchEarthMovementBarAndAccordionDetails(
    +orgid,
    asofDate,
    selectedCurrency,
  );

  return useMemo(() => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const earthMovementAggregates: any =
      data?.btp_natural_hazards?.earth_movement_aggregates;

    const earthMovementZoneAggregate: EarthMovementZoneData[] =
      earthMovementAggregates?.earthquake_frequency_zone_aggregates?.map(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (aggregate: any) => {
          const result: EarthMovementZoneData = {
            zone: aggregate?.earthquake_frequency_zone_code,
            active_locations:
              aggregate?.active_locations_aggregate?.location_count,
            activeTIV:
              aggregate?.active_locations_aggregate?.total_insured_value,
            prospect_locations:
              aggregate?.prospect_locations_aggregate?.location_count,
            prospectTIV:
              aggregate?.prospect_locations_aggregate?.total_insured_value,
          };
          return result;
        },
      );

    const earthMovementRegionAggregate: EarthMovementRegionData[] =
      earthMovementAggregates?.earthquake_region_aggregates?.map(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (aggregate: any) => {
          const result: EarthMovementRegionData = {
            region_code: aggregate?.earthquake_region_code,
            region_description: aggregate?.earthquake_region_description,
            active_location_count:
              aggregate?.active_locations_aggregate?.location_count,
            activeTIV:
              aggregate?.active_locations_aggregate?.total_insured_value,
            prospect_location_count:
              aggregate?.prospect_locations_aggregate?.total_insured_value,
            prospectTIV:
              aggregate?.prospect_locations_aggregate?.total_insured_value,
          };
          return result;
        },
      );
    const payload = {
      EarthMovementBarData: earthMovementZoneAggregate,
      EarthMovementAccordionData: earthMovementRegionAggregate,
      error,
    };
    return payload;
  }, [data, error]);
};

export default useFetchEarthMovementBarAndAccordionData;
