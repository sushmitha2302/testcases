import { useQuery } from '@apollo/client';
import { EarthMovementBarchartDTO } from '@btp/shared-ui';
import { useMemo } from 'react';
import { useAccount } from 'src/common/contexts/AccountContext';
import { useHeader } from 'src/common/contexts/HeaderContext';
import { projectErrorCode } from 'src/common/utils/projectErrorCode';
import { convertDateToJson } from 'src/mappers/natHazMappers';
import {
  BtpNaturalHazards_GetEarthMovementAttributes_V01Document,
  BtpNaturalHazards_GetEarthMovementAttributes_V01Query,
} from 'src/models';

export interface EarthMovementBarDataResponse {
  EarthMovementAttributes: EarthMovementBarchartDTO | null;
  loading: boolean;
  errorCode?: string | null;
  refetch: () => void;
}

const FetchEarthMovementBarAndAccordionDetails = (
  orgid: number,
  date: Date | null,
  selectedCurrency: number | null,
) => {
  const { data, loading, error, refetch } =
    useQuery<BtpNaturalHazards_GetEarthMovementAttributes_V01Query>(
      BtpNaturalHazards_GetEarthMovementAttributes_V01Document,
      {
        variables: {
          org_prospect_client_id: orgid,
          as_of_date: convertDateToJson(date),
          context_currency_type_id: selectedCurrency,
        },
        errorPolicy: 'all',
        notifyOnNetworkStatusChange: true,
      },
    );
  return { data, loading, error, refetch };
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getEarthquakeFrequencyZoneAggregates = (zoneAggregates: any) => {
  return zoneAggregates?.map(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (attribute: any) => {
      const res = {
        zoneCode: attribute?.earthquake_frequency_zone_code,
        zoneDescription: attribute?.earthquake_frequency_zone_description,
        totalLocationCount: attribute?.locations_aggregate?.location_count ?? 0,
        totalTIV: attribute?.locations_aggregate?.total_insured_value ?? 0,
        activeLocationCount:
          attribute?.active_locations_aggregate?.location_count ?? 0,
        activeTIV:
          attribute?.active_locations_aggregate?.total_insured_value ?? 0,
        prospectTIV:
          attribute?.prospect_locations_aggregate?.total_insured_value ?? 0,
        prospectLocationCount:
          attribute?.prospect_locations_aggregate?.total_insured_value ?? 0,
      };
      return res;
    },
  );
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getEarthquakeRegionAggregates = (regionAggregates: any) => {
  return regionAggregates?.map(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (attribute: any) => {
      const res = {
        regionCode: attribute?.earthquake_region_code,
        regionDescription: attribute?.earthquake_region_description,
        totalLocationCount: attribute?.locations_aggregate?.location_count ?? 0,
        totalTIV: attribute?.locations_aggregate?.total_insured_value ?? 0,
        activeLocationCount:
          attribute?.active_locations_aggregate?.location_count ?? 0,
        activeTIV:
          attribute?.active_locations_aggregate?.total_insured_value ?? 0,
      };
      return res;
    },
  );
};

export const useFetchEarthMovementBarAndAccordionData =
  (): EarthMovementBarDataResponse => {
    const { accountDetails } = useAccount();
    const { selectedCurrency, asofDate } = useHeader();
    const { orgid } = accountDetails;
    const { data, loading, error, refetch } =
      FetchEarthMovementBarAndAccordionDetails(
        +orgid,
        asofDate,
        selectedCurrency,
      );

    return useMemo(() => {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const earthMovementAttributes: any =
        data?.btp_natural_hazards?.earth_movement_attributes;
      const EarthMovementAttributes: EarthMovementBarchartDTO | null =
        !data || !earthMovementAttributes
          ? null
          : {
              as_of_date: earthMovementAttributes?.as_of_date,
              currency_type_id: earthMovementAttributes?.currency_type_id,
              org_prospect_client_id:
                earthMovementAttributes?.org_prospect_client_id,
              totalLocationCount:
                earthMovementAttributes?.earth_movement_aggregates
                  ?.locations_aggregate?.location_count ?? 0,
              totalTIV:
                earthMovementAttributes?.earth_movement_aggregates
                  ?.locations_aggregate?.total_insured_value ?? 0,
              totalActiveLocationCount:
                earthMovementAttributes?.earth_movement_aggregates
                  ?.active_locations_aggregate?.location_count ?? 0,
              totalActiveTIV:
                earthMovementAttributes?.earth_movement_aggregates
                  ?.active_locations_aggregate?.total_insured_value ?? 0,
              earthquake_frequency_zone_aggregates:
                getEarthquakeFrequencyZoneAggregates(
                  earthMovementAttributes?.earth_movement_aggregates
                    ?.earthquake_frequency_zone_aggregates,
                ),
              earthquake_region_aggregates: getEarthquakeRegionAggregates(
                earthMovementAttributes?.earth_movement_aggregates
                  ?.earthquake_region_aggregates,
              ),
              riskQuality:
                earthMovementAttributes?.earth_movement_risk_details
                  ?.risk_status?.risk_quality,
              activeLocationsRiskQuality:
                earthMovementAttributes?.earth_movement_risk_details
                  ?.active_locations_risk_status?.risk_quality,
            };

      const payload = {
        EarthMovementAttributes,
        loading,
        errorCode: projectErrorCode(error?.graphQLErrors),
        refetch: () => refetch(),
      };
      return payload;
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [data, loading, error, refetch]);
  };

export default useFetchEarthMovementBarAndAccordionData;
