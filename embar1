/* eslint-disable no-unsafe-optional-chaining */
/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable @typescript-eslint/no-explicit-any */
import {
  AccType,
  BarChart,
  RiskStatus,
  TableList,
  formatNumber,
  convertToPercent,
} from '@btp/shared-ui';
import React from 'react';
import { ColorThemes } from 'shared-ui/src/lib/Highcharts/BarChart/colorThemes';
import { actionsMock } from 'src/NatHazOverview/NatHazOverview.mock';
import { formatAmount } from 'src/mappers/natHazMappers';

// eslint-disable-next-line consistent-return
export const calculateTIV = (responses: any, res: any, type: string) => {
  if (type === 'active') {
    const totalActiveTIV: number = responses.reduce(
      (sum: any, data: { activeTIV: number }) => sum + (data.activeTIV || 0),
      0,
    );
    const tivPercentage =
      totalActiveTIV === 0
        ? 0
        : convertToPercent(res.activeTIV, totalActiveTIV);
    return tivPercentage;
  }
  if (type === 'prospect') {
    const totalProspectTIV: number = responses.reduce(
      (sum: any, data: { prospectTIV: number }) => sum + (data.prospectTIV || 0),
      0,
    );
    const tivPercentage =
      totalProspectTIV === 0
        ? 0
        : convertToPercent(res.prospectTIV, totalProspectTIV);
    return tivPercentage;
  }
};

export const createBarChart = (activezoneData: any, prospectzoneData: any) => {
  // Calculate the total TIV, including null values as 0
  const totalProspectTIV: number = prospectzoneData.reduce(
    (sum: any, data: { barValue: any }) => sum + (data.barValue ?? 0),
    0,
  );
  const totalActiveTIV: number = activezoneData.reduce(
    (sum: any, data: { barValue: any }) => sum + (data.barValue ?? 0),
    0,
  );

  // Filter out null values before rendering the chart
  const filteredProspectzoneData = prospectzoneData.filter(
    (data: { barValue: any }) => data.barValue !== null && !isNaN(data.barValue),
  );
  const filteredActivezoneData = activezoneData.filter(
    (data: { barValue: any }) => data.barValue !== null && !isNaN(data.barValue),
  );

  const prospectEarthMovementBarChart = React.createElement(BarChart, {
    barData: filteredProspectzoneData,
    rightContent: [
      { label: 'Total TIV', value: formatAmount(totalProspectTIV) },
    ],
    theme: ColorThemes.Prospect,
    total: totalProspectTIV,
  });
  const activeEarthMovementBarChart = React.createElement(BarChart, {
    barData: filteredActivezoneData,
    rightContent: [{ label: 'Total TIV', value: formatAmount(totalActiveTIV) }],
    theme: ColorThemes.Active,
    total: totalActiveTIV,
  });

  return { activeEarthMovementBarChart, prospectEarthMovementBarChart };
};

export const earthMovementColumnAccordionData = [
  { key: 'region', header: 'Region' },
  { key: 'locations', header: 'Locations' },
  { key: 'tiv', header: 'TIV' },
  { key: 'tiv_percentage', header: '% Of TIV' },
];

// Changes start here - getEarthMovementBarData function
export const getEarthMovementBarData = (response: any) => {
  const earthMovementAggData = response.reduce((res: any, curr: any) => {
    if (!res[curr.earthquake_frequency_zone_code]) {
      res[curr.earthquake_frequency_zone_code] = {
        activeTIV: 0,
        active_locations: 0,
        prospectTIV: 0,
        prospect_locations: 0,
      };
    }
    const activeTIV = curr.active_locations_aggregate?.total_insured_value ?? 0;
    const activeLocations = curr.active_locations_aggregate?.location_count ?? 0;
    const prospectTIV = curr.prospect_locations_aggregate?.total_insured_value ?? 0;
    const prospectLocations = curr.prospect_locations_aggregate?.location_count ?? 0;

    res[curr.earthquake_frequency_zone_code].activeTIV += activeTIV;
    res[curr.earthquake_frequency_zone_code].active_locations += activeLocations;
    res[curr.earthquake_frequency_zone_code].prospectTIV += prospectTIV;
    res[curr.earthquake_frequency_zone_code].prospect_locations += prospectLocations;
    return res;
  }, {});

  const activezoneData = Object.keys(earthMovementAggData)
    .map((zone: any) => {
      const TIV = earthMovementAggData[zone]?.activeTIV;
      if (TIV === 0 || zone === null || isNaN(zone)) {
        return null;
      }

      const active = {
        label: `Zone ${zone}`,
        barValue: TIV,
        legendValue: formatAmount(TIV),
      };
      return active;
    })
    .filter((active: any) => active !== null);

  const prospectzoneData = Object.keys(earthMovementAggData).reduce(
    (result: any, zone: any) => {
      const activeTIV = earthMovementAggData[zone]?.activeTIV ?? 0;
      const prospectTIV = earthMovementAggData[zone]?.prospectTIV ?? 0;
      if (activeTIV !== 0 && zone !== null && !isNaN(zone)) {
        const active = {
          label: `Zone ${zone}`,
          barValue: activeTIV,
          legendValue: formatAmount(activeTIV),
        };
        result.push(active);
      }
      if (prospectTIV !== 0 && zone !== null && !isNaN(zone)) {
        const prospect = {
          label: `Zone ${zone}`,
          barValue: prospectTIV,
          legendValue: formatAmount(prospectTIV),
          pattern: true,
        };
        result.push(prospect);
      }
      return result;
    },
    [],
  );

  return { activezoneData, prospectzoneData };
};

export const getEarthMovementRegionData = (response: any) => {
  const earthMovementAggRegionData = response.reduce((res: any, curr: any) => {
    if (!res[curr.earthquake_region_code]) {
      res[curr.earthquake_region_code] = {
        region_description: curr?.earthquake_region_description || '',
        activeTIV: 0,
        active_location_count: 0,
        prospectTIV: 0,
        prospect_location_count: 0,
      };
    }
    const activeTIV = curr.active_locations_aggregate?.total_insured_value ?? 0;
    const activeLocations = curr.active_locations_aggregate?.location_count ?? 0;
    const prospectTIV = (curr.prospect_locations_aggregate?.total_insured_value ?? 0) + activeTIV;
    const prospectLocations = (curr.prospect_locations_aggregate?.location_count ?? 0) + activeLocations;

    res[curr.earthquake_region_code].activeTIV += activeTIV;
    res[curr.earthquake_region_code].active_location_count += activeLocations;
    res[curr.earthquake_region_code].prospectTIV += prospectTIV;
    res[curr.earthquake_region_code].prospect_location_count += prospectLocations;
    return res;
  }, {});

  const regionActiveTable = Object.keys(earthMovementAggRegionData)
    .map((region: any) => {
      const activeTIV = earthMovementAggRegionData[region]?.activeTIV;
      if (activeTIV === 0 || region === null || isNaN(region)) {
        return null;
      }
      const regionObj = {
        region: earthMovementAggRegionData[region].region_description,
        locations: earthMovementAggRegionData[region]?.active_location_count,
        tiv: formatNumber(activeTIV),
        tiv_percentage: calculateTIV(
          response,
          earthMovementAggRegionData[region],
          'active',
        ),
      };
      return regionObj;
    })
    .filter((active: any) => active !== null);

  const regionProspectTable = Object.keys(earthMovementAggRegionData)
    .map((region: any) => {
      const prospectTIV = earthMovementAggRegionData[region]?.prospectTIV;
      if (prospectTIV === 0 || region === null || isNaN(region)) {
        return null;
      }
      const regionObj = {
        region: earthMovementAggRegionData[region].region_description,
        locations: earthMovementAggRegionData[region]?.prospect_location_count,
        tiv: formatNumber(prospectTIV),
        tiv_percentage: calculateTIV(
          response,
          earthMovementAggRegionData[region],
          'prospect',
        ),
      };
      return regionObj;
