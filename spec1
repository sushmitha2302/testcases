import { render, screen } from '@testing-library/react';
import { ErrorBoundary } from 'react-error-boundary';
import { ErrorFallback } from '../common/components/ErrorFallback';
import { App } from './App';
import { BtpTelemetry, BtpApolloProvider, LaunchDarklyContextProvider } from '@btp/shared-ui';
import ContextProviders from 'src/common/contexts/ContextProviders';
import MainLayout from 'src/common/components/MainLayout';
import { MainRoutes } from 'src/routes/MainRoutes';

jest.mock('@btp/shared-ui', () => ({
  BtpTelemetry: ({ children }) => <div>{children}</div>,
  BtpApolloProvider: ({ children }) => <div>{children}</div>,
  LaunchDarklyContextProvider: ({ children }) => <div>{children}</div>,
  setupAggridLicense: jest.fn(),
}));

jest.mock('src/common/contexts/ContextProviders', () => ({ children }) => <div>{children}</div>);
jest.mock('src/common/components/MainLayout', () => ({ children }) => <div>{children}</div>);
jest.mock('src/routes/MainRoutes', () => () => <div>MainRoutes</div>);

describe('App', () => {
  const setPlatformConfiguration = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<App useSetPlatformState={() => ({ setPlatformConfiguration })} />);
    expect(screen.getByText('MainRoutes')).toBeInTheDocument();
  });

  it('sets platform configuration on mount', () => {
    render(<App useSetPlatformState={() => ({ setPlatformConfiguration })} />);
    expect(setPlatformConfiguration).toHaveBeenCalledWith({
      accountSelector: false,
      header: false,
      navigation: false,
    });
  });

  it('renders ErrorFallback when there is an error', () => {
    const ErrorThrower = () => {
      throw new Error('Test error');
    };

    render(
      <ErrorBoundary FallbackComponent={ErrorFallback}>
        <ErrorThrower />
      </ErrorBoundary>
    );
    expect(screen.getByText(/Try again/i)).toBeInTheDocument();
  });

  it('renders children when no error occurs', () => {
    const { getByText } = render(
      <ErrorBoundary FallbackComponent={ErrorFallback}>
        <div>Hi Natural Hazards</div>
      </ErrorBoundary>
    );

    const helloText = getByText(/Hi Natural Hazards/i);
    expect(helloText).toBeInTheDocument();
  });

  it('should merge existing and incoming data correctly', () => {
    // Mock existing and incoming data
    const existingData = [
      {
        id: 1,
        btp_account_attributes: {
          name: 'Existing Account',
        },
      },
    ];
    const incomingData = [{ btp_account_attributes: { address: 'New Address' }, id: 1 }];

    // Assuming you have a function to merge data (similar to what's in your typePolicies)
    const mergedData = Object.assign({}, existingData[0], incomingData[0]);

    // Assert that the merged data is correct
    expect(mergedData).toEqual({
      btp_account_attributes: {
        address: 'New Address',
      },
      id: 1,
    });
  });
});
